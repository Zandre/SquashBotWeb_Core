// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SquashBotWebCore.Data;
using SquashBotWebCore.Models.SquashBot.Classes.Enums;
using System;

namespace SquashBotWebCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SquashBotWebCore.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SquashBotWebCore.Models.SquashBot.Classes.TournamentClasses.Fixture", b =>
                {
                    b.Property<int>("FixtureId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Court");

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("SectionId");

                    b.Property<int>("TeamAId");

                    b.Property<int>("TeamBId");

                    b.Property<int>("TournamentSquashVenueId");

                    b.HasKey("FixtureId");

                    b.HasIndex("SectionId");

                    b.ToTable("Fixtures");
                });

            modelBuilder.Entity("SquashBotWebCore.Models.SquashBot.Classes.TournamentClasses.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Gender");

                    b.Property<string>("Name");

                    b.Property<int>("Par");

                    b.Property<int>("PlayersPerTeam");

                    b.Property<int>("TournamentId");

                    b.HasKey("SectionId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("SquashBotWebCore.Models.SquashBot.Classes.TournamentClasses.SquashVenue", b =>
                {
                    b.Property<int>("SquashVenueId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourtsAvailable");

                    b.Property<string>("Name");

                    b.HasKey("SquashVenueId");

                    b.ToTable("SquashVenues");
                });

            modelBuilder.Entity("SquashBotWebCore.Models.SquashBot.Classes.TournamentClasses.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SectionId");

                    b.HasKey("TeamId");

                    b.HasIndex("SectionId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("SquashBotWebCore.Models.SquashBot.Classes.TournamentClasses.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<int>("SectionType");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("TournamentId");

                    b.ToTable("Tournament");
                });

            modelBuilder.Entity("SquashBotWebCore.Models.SquashBot.Classes.TournamentClasses.TournamentAdministrator", b =>
                {
                    b.Property<int>("TournamentAdministratorId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ApplicationUserId");

                    b.Property<int>("TournamentId");

                    b.Property<string>("UserId");

                    b.HasKey("TournamentAdministratorId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UserId");

                    b.ToTable("TournamentAdministrators");
                });

            modelBuilder.Entity("SquashBotWebCore.Models.SquashBot.Classes.TournamentClasses.TournamentSquashVenue", b =>
                {
                    b.Property<int>("TournamentSquashVenueId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SquashVenueId");

                    b.Property<int>("TournamentId");

                    b.HasKey("TournamentSquashVenueId");

                    b.HasIndex("SquashVenueId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentSquashVenues");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SquashBotWebCore.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SquashBotWebCore.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SquashBotWebCore.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SquashBotWebCore.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SquashBotWebCore.Models.SquashBot.Classes.TournamentClasses.Fixture", b =>
                {
                    b.HasOne("SquashBotWebCore.Models.SquashBot.Classes.TournamentClasses.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SquashBotWebCore.Models.SquashBot.Classes.TournamentClasses.Section", b =>
                {
                    b.HasOne("SquashBotWebCore.Models.SquashBot.Classes.TournamentClasses.Tournament", "Tournament")
                        .WithMany("Sections")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SquashBotWebCore.Models.SquashBot.Classes.TournamentClasses.Team", b =>
                {
                    b.HasOne("SquashBotWebCore.Models.SquashBot.Classes.TournamentClasses.Section", "Section")
                        .WithMany("Teams")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SquashBotWebCore.Models.SquashBot.Classes.TournamentClasses.TournamentAdministrator", b =>
                {
                    b.HasOne("SquashBotWebCore.Models.SquashBot.Classes.TournamentClasses.Tournament", "Tournament")
                        .WithMany("TournamentAdministrators")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SquashBotWebCore.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SquashBotWebCore.Models.SquashBot.Classes.TournamentClasses.TournamentSquashVenue", b =>
                {
                    b.HasOne("SquashBotWebCore.Models.SquashBot.Classes.TournamentClasses.SquashVenue", "SquashVenue")
                        .WithMany()
                        .HasForeignKey("SquashVenueId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SquashBotWebCore.Models.SquashBot.Classes.TournamentClasses.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
