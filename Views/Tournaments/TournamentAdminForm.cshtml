@using SquashBotWebCore.Models.SquashBot.Classes.Enums
@model SquashBotWebCore.Models.TournamentAdminViewModels.TournamentVm

@{
    ViewData["Title"] = "SaveTournament";
}

<h2>@(Model.IsNew ? "SaveSquashVenue Tournament" : Model.Name)</h2>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="SaveTournament">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            @Html.HiddenFor(m => m.TournamentId)
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="SectionType" class="control-label"></label>
                @Html.DropDownList("SectionType", Html.GetEnumSelectList<SectionType>(), "", new { @class = "form-control" })
                <span asp-validation-for="SectionType" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StartDate" class="control-label"></label>
                <input asp-for="StartDate" class="form-control" />
                <span asp-validation-for="StartDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="EndDate" class="control-label"></label>
                <input asp-for="EndDate" class="form-control" />
                <span asp-validation-for="EndDate" class="text-danger"></span>
            </div>
            <div class="form-group row">
                <a asp-action="Index" class="btn btn-primary">Back</a>

                <input type="submit" value="@(Model.IsNew ? "SaveSquashVenue Tournament" : "Save Tournament")" class="btn btn-success"/>

                @if (!Model.IsNew)
                {
                    @Html.ActionLink("Delete Tournament", "Delete", new { id = Model.TournamentId }, new { @class = "btn btn-danger" })
                }
            </div>
            <div class="form-group row">
                @if (!Model.IsNew)
                {
                    @Html.ActionLink("Administrators", "Index", "TournamentAdministrators", new { tournamentId = Model.TournamentId }, new { @class = "btn btn-info" })
                }
                @if (!Model.IsNew)
                {
                    @Html.ActionLink("Venues", "Index", "TournamentSquashVenues", new { tournamentId = Model.TournamentId }, new { @class = "btn btn-info" })
                }
            </div>
        </form>
    </div>
</div>
<div class="row">
    @if (!Model.IsNew)
    {
        <h2>@(Model.SectionType + "s")</h2>
        <div>
            <table id="sectionGrid" class="table table-striped table-bordered dt-responsive nowrap">
                <thead>
                <tr>
                    <th>Section</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var section in Model.Sections)
                {
                    <tr>
                        <td>
                            @Html.ActionLink(section.Name, "Edit", "Sections", new { id = section.SectionId }, null)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => section.Gender)
                        </td>
                    </tr>
                }
                </tbody>
            </table>
            <div class="form-group">
                <div>
                    @Html.ActionLink("Add New " + Model.SectionType, "SaveSection", "Sections", new { tournamentId = Model.TournamentId }, new { @class = "btn btn-success" })
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}   
}

<script>
    $('#sectionGrid').dataTable({
    });
</script>